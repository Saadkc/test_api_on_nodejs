"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("../../../common/utils");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var CartMapper = /*#__PURE__*/function () {
  function CartMapper() {
    _classCallCheck(this, CartMapper);
  }
  _createClass(CartMapper, [{
    key: "mapToCart",
    value:
    /**
     * @param {PaymentRequestData} data
     * @returns {Object}
     */
    function mapToCart(data) {
      var _data$cart = data.cart,
        cart = _data$cart === void 0 ? {} : _data$cart;
      return (0, _utils.omitNil)({
        currency_code: cart.currency,
        items: this.mapToItems(data),
        totals: this.mapToOrderTotals(data)
      });
    }

    /**
     * @private
     * @param {PaymentRequestData} data
     * @returns {Object[]}
     */
  }, {
    key: "mapToItems",
    value: function mapToItems(data) {
      var _this = this;
      var _data$cart2 = data.cart,
        cart = _data$cart2 === void 0 ? {
          items: []
        } : _data$cart2;
      return cart.items.map(function (itemData) {
        return (0, _utils.omitNil)({
          discount_amount: itemData.integerDiscount,
          name: itemData.name,
          price: itemData.integerAmount,
          unit_price: itemData.integerUnitPrice,
          quantity: itemData.quantity,
          sku: itemData.sku,
          tax_amount: itemData.integerTax,
          amount: itemData.integerAmountAfterDiscount,
          type: _this.mapToType(itemData)
        });
      });
    }

    /**
     * @private
     * @param {PaymentRequestData} data
     * @returns {Object}
     */
  }, {
    key: "mapToOrderTotals",
    value: function mapToOrderTotals(data) {
      var _data$cart3 = data.cart,
        cart = _data$cart3 === void 0 ? {} : _data$cart3;
      return (0, _utils.omitNil)({
        discount_total: cart.discount ? cart.discount.integerAmount : null,
        grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,
        shipping_total: cart.shipping ? cart.shipping.integerAmount : null,
        subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,
        surcharge_total: cart.handling ? cart.handling.integerAmount : null,
        tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null
      });
    }

    /**
     * @private
     * @param {Object} itemData
     * @returns {Object}
     */
  }, {
    key: "mapToType",
    value: function mapToType(itemData) {
      var types = {
        ItemPhysicalEntity: 'physical',
        ItemDigitalEntity: 'digital',
        ItemGiftCertificateEntity: 'gift_card'
      };
      return types[itemData.type];
    }
  }], [{
    key: "create",
    value:
    /**
     * @returns {CartMapper}
     */
    function create() {
      return new CartMapper();
    }
  }]);
  return CartMapper;
}();
exports.default = CartMapper;
//# sourceMappingURL=cart-mapper.js.map